## Data Preprocessing
Before starting the model training, we need to pre-process the input. This folder contains the required scripts for pre-processing the instruction trace, analyzing the stats of the input and building the simulator.

**Required Input**: Instruction trace i.e. output of gem5

#### Required python packages for preprocessing
1. numpy
2. sortedcontainers

### 1. Preprocessing training data:
---
First, we need to generate the required executables with command `make`. 
#### Step 1: Build the Re-order buffer (ROB)
Run the executable and dump the output to a new file **one_out.txt**.

`./0_buildROB 500.perlbench_r.10.txt > one_out.txt`

#### Step 2: Remove the duplicates
Remove the duplicate entries and shuffle the entries. This will output a file with name **one_out.txtu**.

`python 1_unique.py one_out.txt`

#### Step 3: Conversion
Convert variables to numpy format. This will output a *npz* file **one_out.txtu.t0.npz**.

`python 2_ml-to-npy.py one_out.txtu`

#### Step 4: Input normalizeation  
Normalzie the input with mean and variance. This will output multiple file. The stats of the input data i.e. mean and variance will be stored in the data_spec folder. The normalized file will be in the same directory with normalize tag i.e. **normall_one_out.txtu.t0.npz**.

`python 3_scale.py --save one_out.txtu.t0.npz`

The terminal shows the number of features, global mean and global variance.

#### Step 5: Combine
Combine all the normalized npz file (if multiple). Output **totall.npz**.

`python 4_combine.py normall_one_out.txtu.t0.npz`

#### Step 6: Test and train dataset
Divide the datasets for test and training. We can control the batchsize and split of test/train data from this script. This will generate a **nntest.npz** file for testing.

`python 6_get_test.py totalall.npz`


### 2. Building simulator input
---
#### Step 1:    
Build the instruction trace for the simulator. Use output of Step 1 of preprocessing as input for this script. Write the output to a file.
    
`./make_sim_input.py 1_input.txt <number of instructions> > simulator_input.txt`

#### Step 2: 
Build the aux instruction trace for the simulator. The input is the original file from Gem5.

`./buildSim <filename> <number of instructions> > aux_trace.txt`

### Other Scripts
---
1. `5_stats.py`: Displays values seen for different features of the dataset in a sorted list. The  input for this script is the output from the `1_unique.py` i.e. **one_out.txtu**.

    `python 5_stats.py one_out.txtu`

    The stats shown are:

    1. Context length
    2. Time out
    3. Time in
    4. Instruction type
    5. \# of source reginsters
    6. Source register type
    7. Source register index
    8.  \# of destination registers
    9. Destination register type
    10. Destination register index
    11. Register
    12. PC


2. `7_print_stat.py`: Displays the mean and variance of normalized data generated by `3_scale.py`. The input is **statsall,npz** in the *data_spec* folder.

